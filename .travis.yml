language: generic
env:
    global:
        - secure: "GKZ+sjlIXDiclzPOw9RO7/xzl9PTZd9DpXC9uTMrJwLOThwl8kQJwMOLyeoOpdAS3/TEhGLDYRG4QPl9uPN7QEdE/GV0q1DImZRXzP6zTLxz0zX3P4YJ4pOoUJBHXdzEocNfI+Ajt2SLWw3L2BEa7KXU2i2EkaknaHd6m5X/ISOyqaklrr9HFQEvfV9d98vEa0U0Pn29gG2jf+q5uDrkL+vsoc5O7ic/AFupTQFRShcfgo9qKADFOr+UQ2M5iW7nec7L09/kJ0yABk+CRNienjZzivFtbDaTUlHPhfjNheO9GDgb/+jsj7ruyc4Xi0+fAMdGQbD/3G34c88X17ApzzHpqA0XGf70H/drgb6mnU+HaDWBmJo+QbRqJBjzP6Aq0so5fQs0rm8DvjjZDRn1hP7YO/eh3F20QE/iDiBORoXia1JnaQGpmR4lADQ72tFZ99zJkKUSiyBhKW/WCVTOhHa7167P2d5RrtwHF0w0Q40U+/g/jHt9WJP5wNg0ycnUCjxaIOlQFk2jmqIRmXCKjVDjIim22AgIah9eW+dtR40MggvwW/gpEldI6kvho9xfyr/FSNnuG9WSmlBglZbUWKT16jQJMd3XMSVGbYiKN2+uPTA6Oe/o7Mxp1Td/eAYZZC4t9f4sk3BuodEUWJ39tadJi2qMY6aV1omgcpoa2QU="
matrix:
    include:
        # linux environments
        - env:
            - PYTHON_VERSION=3.7
          os: linux
        - env:
            - PYTHON_VERSION=3.6
          os: linux
        - env:
            - PYTHON_VERSION=3.5
          os: linux
        - env:
            - PYTHON_VERSION=2.7
          os: linux
        # osx environments
        - env:
            - PYTHON_VERSION=3.7
          os: osx
        - env:
            - PYTHON_VERSION=3.6
          os: osx
        - env:
            - PYTHON_VERSION=2.7
          os: osx
install:
  # select the os name for the conda installer
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        OS_NAME=MacOSX;
    else
        OS_NAME=Linux;
    fi
  # We do this conditionally because it saves us some downloading if the
  # version is the same.
  - if [[ "$PYTHON_VERSION" == "2.7" ]]; then
        wget https://repo.continuum.io/miniconda/Miniconda2-latest-"${OS_NAME}"-x86_64.sh -O miniconda.sh;
    else
        wget https://repo.continuum.io/miniconda/Miniconda3-latest-"${OS_NAME}"-x86_64.sh -O miniconda.sh;
    fi
  # make sure we use an 'innocent' default matplotlib environment
  - touch matplotlibrc
  # setup conda environment
  - bash miniconda.sh -b -p $HOME/miniconda
  - export PATH="$HOME/miniconda/bin:$PATH"
  - pip install pyyaml  # is somehow not included in the current conda installation
  - hash -r
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  # install conda build and anaconda-client for deploy
  - conda install conda-build anaconda-client
  # Useful for debugging any issues with conda
  - conda info -a
  - 'ENVKEY=py"${PYTHON_VERSION}"'
  - conda env create -f tests/envs/environment_$ENVKEY.yml
  - source activate psyplot_$ENVKEY
  # use latest development version
  # NOTE: Remove this when psyplot is stable enough
  - git clone "https://github.com/Chilipp/psyplot.git" -b $TRAVIS_BRANCH || git clone "https://github.com/Chilipp/psyplot.git"
  - cd psyplot && python setup.py install && cd .. && rm -rf psyplot
  # use the branch from psy-simple
  - git clone "https://github.com/Chilipp/psy-simple.git" -b $TRAVIS_BRANCH || git clone "https://github.com/Chilipp/psy-simple.git"
  - cd psy-simple && python setup.py install && cd .. && rm -rf psy-simple
  - if [[ $TRAVIS_TAG == "" ]]; then export GIT_BRANCH=$TRAVIS_BRANCH; fi
  # install coveralls
  - pip install coveralls
  # install psyplot
  - python setup.py install
  # export the environment for debugging
  - conda env export -n psyplot_$ENVKEY
  # print versions of all the important requirements
  - psyplot -aV
  # add conda-forge channel for build
  - conda config --add channels chilipp/label/$TRAVIS_BRANCH
  - conda config --add channels conda-forge

script:
  # run the tests
  - coverage run --source=psy_reg setup.py test -a "-v"
  - conda build ci/conda-recipe --python $PYTHON_VERSION
  # deploy here (don't use travis deploy because it requires homebrew)
  - if [[ $TRAVIS_PULL_REQUEST == "false" && $TRAVIS_REPO_SLUG == "Chilipp/psy-reg" && $DEPLOY_CONDA == "true" ]]; then
        conda activate base;
        ci/deploy_anaconda.py;
    fi

after_success:
  - coveralls
